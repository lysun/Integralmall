<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.8.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd"	
	default-lazy-init="true">
	
	<description>SpringJpa配置</description>
    <context:component-scan base-package="com.doublev2v"/>
    
    <context:property-placeholder location="classpath:app.properties" file-encoding="utf-8"/>
    
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="dbProperties">
		   <props>
		      <prop key="useUnicode">yes</prop>
		      <prop key="characterEncoding">utf8</prop>
		   </props>
		</property>
		
		<!-- Connection Pooling Info -->
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxWait" value="${jdbc.pool.maxWait}" />
 		<property name="maxAge" value="${jdbc.pool.maxAge}" />
    	<property name="testOnBorrow" value="${jdbc.pool.testOnBorrow}"></property>  
    	<property name="testOnReturn" value="${jdbc.pool.testOnReturn}"></property>  
    	<property name="testWhileIdle" value="${jdbc.pool.testWhileIdle}"></property>
    	<property name="validationQuery" value="${jdbc.pool.validationQuery}"></property>  
		<!-- 连接Idle10分钟后超时，每1分钟检查一次 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />			
		<property name="minEvictableIdleTimeMillis" value="600000" />
		
	</bean>
	
    <!-- 定义实体管理器工厂
         Jpa配置   LocalContainerEntityManagerFactoryBean这个选项Spring扮演了容器的角色。完全掌管JPA -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <!-- 指定数据源 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 指定Jpa持久化实现厂商类,这里以Hibernate为例 -->
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <!-- 指定Entity实体类包路径 -->
        <property name="packagesToScan" >
            <array>
                <value>com.doublev2v</value>
                <!-- 让jpa知道一些类型并转换成数据库知道的类型 -->
                <value>org.springframework.data.jpa.convert.threeten</value>
            </array>
        </property>
        <!-- 指定JPA属性；如Hibernate中指定是否显示SQL的是否显示、方言等 -->
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>  
                <prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>   
                <prop key="hibernate.cache.use_query_cache">true</prop><!-- 开启查询缓存 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.query.substitutions">true 1, false 0</prop><!-- 映射boolean到数据库中的值 --> 
            </props>
        </property>
    </bean>
    
    <!-- 重要配置：启用扫描并自动创建代理的功能  -->
    <jpa:repositories base-package="com.doublev2v" 
     	transaction-manager-ref="transactionManager" 
     	entity-manager-factory-ref="entityManagerFactory"/>
    
    <!-- Hibernate对Jpa的实现 -->
    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>

    <!-- Jpa 事务管理器  -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

    <!-- 上传文件自定义组件初始化 -->
    <bean class="com.doublev2v.foundation.media.LocalMediaService">
        <property name="serverName" value="${imageServer.name}"/>
  		<property name="serverAddress" value="${imageServer.address}"/>
  		<property name="basePath" value="${imageServer.basePath}"/>
  		<property name="relativePath" value="${imageServer.relativePath}"/>
  	</bean> 
  	
  	
  	<!-- mybatis配置SqlSessionDaoSupport -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath*:mybatis/mapper/**/*.xml" />
	</bean> 
  	<mybatis:scan base-package="com.doublev2v.integralmall.social,com.doublev2v.integralmall.designerCraft"/>
</beans>